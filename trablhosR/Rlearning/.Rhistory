grid_ago <-SpatialPointsDataFrame(
coordinates(r_ago),
proj4string = "+proj=longlat +datum=WGS84")
grid_ago <-SpatialPointsDataFrame(
coordinates(r_ago), data=r_ago,
proj4string = "+proj=longlat +datum=WGS84")
grid_ago <-SpatialPointsDataFrame(
coordinates(r_ago), data=r_ago,
proj4string(CRS(proj4string = "+proj=longlat +datum=WGS84")))
grid_ago <-SpatialPointsDataFrame(
coordinates(r_ago), data=r_ago,
proj4string = CRS("+proj=longlat +datum=WGS84")
)
agoSp <-rasterToPoints(r_ago,spatial = T)
grid_ago <- as(r_ago, 'SpatialPointsDataFrame')
agoSp <-rasterToPoints(r_ago,spatial = T)
rago <- raster(extent(t2))
res(rago) <- c(10000,10000)
rago[] <- 1
r_ago <- mask(rago, t2)
rago <- raster(extent(t2))
r_ago <- mask(rago, t2)
r_ago
plot(r_ago)
coordinates(r_ago)
grid_ago <- as(r_ago, 'SpatialPointsDataFrame')
agoSp <-rasterToPoints(r_ago,spatial = T)
agoSp <-rasterToPoints(r_ago,spatial)
agoSp <-rasterToPoints(r_ago)
View(agoSp)
r_ago
coordinates(r_ago)
r_ago
grid_ago <-SpatialPointsDataFrame(
coordinates(r_ago), data=r_ago,
proj4string = CRS("+proj=longlat +datum=WGS84"))
df_r_ago <-as.data.frame(r_ago)
df_r_ago
r_ago
rago <- raster(extent(t2))
rago[] <- 1
r_ago <- mask(rago, t2)
r_ago
df_r_ago <-as.data.frame(r_ago)
df_r_ago
res(rago) <- c(10000,10000)
rago
rago[] <- 1
rago
r_ago <- mask(rago, t2)
rago <- raster(extent(t2))
rago[] <- 1:ncell(rago)
r_ago <- mask(rago, t2)
r_ago
rago[] <- 1:ncell(rago)
rago
r_ago <- mask(rago, t2)
r_ago <- 1:ncell(r_ago)
r_ago
df_r_ago <-as.data.frame(r_ago)
df_r_ago
coordinates(r_ago)
proj4string(rago) <- CRS(proj4string(t2))
r_ago <- mask(rago, t2)
r_ago <- 1:ncell(r_ago)
r_ago
coordinates(r_ago)
plot(t1)
t2
t2 <-raster(t1,ncol=100,nrow=100)
t2
head(t2)
coordinates(t2)
head(coordinates(t2))
rago <- raster(extent(t2))
r_ago <- mask(rago, t2)
r_ago <- mask(rago, t2)
t2
crs(t2) <-crs
t2
proj4string(rago) <- CRS(proj4string(t2))
r_ago <- mask(rago, t2)
rago
rago <- raster(extent(t2))
rago
rago <- raster(t2)
rago
r_ago <- mask(rago, t2)
r_ago <- 1:ncell(r_ago)
r_ago
plot(r_ago)
rago[] <- 1
rago
summary(t0001)
plot(r_ago)
r_ago[] <- 1
crs(t2) <-crs
plot(r_ago)
coordinates(r_ago)
head(coordinates(t2))
head(t2)
plot(t2)
spplot(t2)
t2[] <-1
head(t2)
head(coordinates(t2))
plot(t2)
t3 <-rasterize(t1,t2)
t3
t1 <-readOGR("bacia_delim.shp",layer = "bacia_delim")
t2 <-raster(t1,ncol=100,nrow=100)
t3 <-rasterize(t1,t2)
t3
plot(t3)
t3[] <-1
plot(t3)
t3 <-rasterize(t1,t2)
t3
plot(t3)
head(coordinates(t3))
rago <- raster(t3)
rago[] <- 1
rago
crs <-crs("+proj=longlat +datum=WGS84")
crs(t3) <-crs
proj4string(rago) <- CRS(proj4string(t3))
r_ago <- mask(rago, t2)
r_ago[] <- 1
r_ago
plot(r_ago)
r_ago <- mask(rago, t3)
r_ago[] <- 1
r_ago
plot(r_ago)
head(coordinates(r_ago))
df_r_ago <-as.data.frame(r_ago)
df_r_ago
df_r_ago <-as.data.frame(r_ago[1])
df_r_ago
df_r_ago <-as.data.frame(r_ago[])
df_r_ago
r_ago[2,3]
df_r_ago <-as.data.frame(r_ago[,])
df_r_ago
coordinates(r_ago), data=df_r_ago,
grid_ago <-SpatialPointsDataFrame(
coordinates(r_ago), data=df_r_ago,
proj4string = CRS("+proj=longlat +datum=WGS84"))
gridded(grid_ago) <- TRUE
grid_ago
MA <- read.delim("~/r/GIs/MA")
View(MA)
attach(MA)
df1 <-MA[,2:3]
tdata <- data.frame(x=rep(coordinates(r_ago)[,1], 3),
y=rep(coordinates(r_ago)[,2], 3),
temp=runif(75, 12,35),
day = rep(1:3, each = 25))
View(tdata)
idw_ago <- idw(temp ~ 1, tdata[tdata$day == 1, ], grid_ago, idp = 2.5)
coordinates(tdata) <- ~x+y
proj4string(tdata) <- CRS(proj4string(t3))
idw_ago <- idw(temp ~ 1, tdata[tdata$day == 1, ], grid_ago, idp = 2.5)
spplot(idw_ago, "var1.pred")
r_ago <- mask(rago, t3)
r_ago
plot(r_ago)
df_r_ago <-as.data.frame(r_ago[,])
grid_ago <-SpatialPointsDataFrame(
coordinates(r_ago), data=df_r_ago,
proj4string = CRS("+proj=longlat +datum=WGS84"))
grid_ago <- as(r_ago, 'SpatialPointsDataFrame')
grid_ago <- grid_ago[!is.na(grid_ago@data$layer), ]
gridded(grid_ago) <- TRUE
grid_ago
tdata <- data.frame(x=rep(coordinates(r_ago)[,1], 3),
y=rep(coordinates(r_ago)[,2], 3),
temp=runif(75, 12,35),
day = rep(1:3, each = 25))
coordinates(tdata) <- ~x+y
proj4string(tdata) <- CRS(proj4string(t3))
idw_ago <- idw(temp ~ 1, tdata[tdata$day == 1, ], grid_ago, idp = 2.5)
spplot(idw_ago, "var1.pred")
idw_ago <- idw(temp ~ 1, tdata[tdata$day == 1, ], grid_ago, idp = 2.5,nmax=6)
spplot(idw_ago, "var1.pred")
idw_ago <- idw(temp ~ 1, tdata[tdata$day == 1, ], grid_ago, idp = 2.5,nmax=1)
spplot(idw_ago, "var1.pred")
t2 <-raster(t1,ncol=10,nrow=10)
t3 <-rasterize(t1,t2)
t3
plot(t3)
head(coordinates(t3))
crs <-crs("+proj=longlat +datum=WGS84")
crs(t3) <-crs
rago <- raster(t3)
rago[] <- 1
rago
proj4string(rago) <- CRS(proj4string(t3))
r_ago <- mask(rago, t3)
r_ago[] <- 1
r_ago
plot(r_ago)
r_ago <- mask(rago, t3)
plot(r_ago)
tdata <- data.frame(x=rep(coordinates(r_ago)[,1], 3),
y=rep(coordinates(r_ago)[,2], 3),
temp=runif(75, 12,35),
day = rep(1:3, each = 25))
coordinates(tdata) <- ~x+y
proj4string(tdata) <- CRS(proj4string(t3))
df_r_ago <-as.data.frame(r_ago[,]) # transforma o raster em data frame
df_r_ago
grid_ago <-SpatialPointsDataFrame(
coordinates(r_ago), data=df_r_ago,
proj4string = CRS("+proj=longlat +datum=WGS84"))
grid_ago <- as(r_ago, 'SpatialPointsDataFrame')
grid_ago <- grid_ago[!is.na(grid_ago@data$layer), ]
gridded(grid_ago) <- TRUE
grid_ago
idw_ago <- idw(temp ~ 1, tdata[tdata$day == 1, ], grid_ago, idp = 2.5,nmax=1)
spplot(idw_ago, "var1.pred")
points(temp)
t2 <-raster(t1,ncol=25,nrow=25)
t3 <-rasterize(t1,t2)
t3
plot(t3)
rago <- raster(t3)
rago[] <- 1
rago
proj4string(rago) <- CRS(proj4string(t3))
r_ago <- mask(rago, t3)
r_ago
plot(r_ago)
df_r_ago <-as.data.frame(r_ago[,]) # transforma o raster em data frame
df_r_ago
grid_ago <-SpatialPointsDataFrame(
coordinates(r_ago), data=df_r_ago,
proj4string = CRS("+proj=longlat +datum=WGS84"))
grid_ago <- as(r_ago, 'SpatialPointsDataFrame')
grid_ago <- grid_ago[!is.na(grid_ago@data$layer), ]
gridded(grid_ago) <- TRUE
grid_ago
tdata <- data.frame(x=rep(coordinates(r_ago)[,1], 3),
y=rep(coordinates(r_ago)[,2], 3),
temp=runif(75, 12,35),
day = rep(1:3, each = 25))
coordinates(tdata) <- ~x+y
proj4string(tdata) <- CRS(proj4string(t3))
idw_ago <- idw(temp ~ 1, tdata[tdata$day == 1, ], grid_ago, idp = 2.5,nmax=1)
spplot(idw_ago, "var1.pred")
idw_ago <- idw(temp ~ 1, tdata[tdata$day == 2, ], grid_ago, idp = 2.5,nmax=1)
spplot(idw_ago, "var1.pred")
idw_ago <- idw(temp ~ 1, tdata[tdata$day == 3, ], grid_ago, idp = 2.5,nmax=1)
spplot(idw_ago, "var1.pred")
install.packages("geoR")
library("geoR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("geoRglm")
library(geoR)
library(geoRglm)
data("p50")
data("b50")
sim.g <- grf(grid = expand.grid(x = seq(1, 10, l = 10),
+     y = seq(1, 10, l = 10)), cov.pars = c(0.1, 0.2))
sim.g
sim.g <- grf(grid = expand.grid(x = seq(1, 10, l = 10),
+     y = seq(1, 10, l = 10)), cov.pars = c(0.1, 0.2))
sim.g <- grf(grid = expand.grid(x = seq(1, 10, l = 10),
+     y = seq(1, 10, l = 10)), cov.pars = c(0.1, 0.2))
sim.g
sim.g <- grf(grid = expand.grid(x = seq(1, 10, l = 10),
+y = seq(1, 10, l = 10)), cov.pars = c(0.1, 0.2))
y = seq(1, 10, l = 10)), cov.pars = c(0.1, 0.2))
y = seq(1, 10, l = 10)), cov.pars = c(0.1, 0.2)
sim.g <- grf(grid = expand.grid(x = seq(1, 10, l = 10),
+y = seq(1, 10, l = 10), cov.pars = c(0.1, 0.2))
sim.g <- grf(grid = expand.grid(x = seq(1, 10, l = 10),
+y = seq(1, 10, l = 10), cov.pars = c(0.1, 0.2))
sim.g <- grf(grid = expand.grid(x = seq(1, 10, l = 10),+
y = seq(1, 10, l = 10), cov.pars = c(0.1, 0.2))
sim.g <- grf(grid = expand.grid(x = seq(1, 10, l = 10), +
y = seq(1, 10, l = 10), cov.pars = c(0.1, 0.2))
sim.g <- grf(grid = expand.grid(x = seq(1, 10, l = 10), +
y = seq(1, 10, l = 10)), cov.pars = c(0.1, 0.2))
x = seq(1, 10, l = 10)
y = seq(1, 10, l = 10)
sim.g <- grf(grid = expand.grid(x, +
y), cov.pars = c(0.1, 0.2))
sim.g
sim <- list(coords = sim.g$coords, units.m = c(rep(1,
+     50), rep(5, 50)))
sim
library(raster)
library(sp)
library(rgdal)
library(gstat)
library(maptools)
library(fields)
library(pls)
p <- matrix(c(48, 48, 48, 53, 50, 46, 54, 70, 84, 85, 74, 84, 95, 85,
66, 42, 26, 4, 19, 17, 7, 14, 26, 29, 39, 45, 51, 56, 46, 38, 31,
22, 34, 60, 70, 73, 63, 46, 43, 28), ncol=2) # matriz 2x2
a <- matrix(c(22, 33, 64, 85, 92, 94, 59, 27, 30, 64, 60, 33, 31, 9,
99, 67, 15, 5, 4, 30, 8, 37, 42, 27, 19, 69, 60, 73, 3, 5, 21,
37, 52, 70, 74, 9, 13, 4, 17, 47), ncol=2) # matriz 2x2
xy <- rbind(cbind(1, p), cbind(0, a))
v <- data.frame(cbind(pa=xy[,1], extract(logo, xy[,2:3]))) # criando um subset com dados da imagem para criar o modelo
model <- glm(formula=pa~., data=v)
v <- data.frame(cbind(pa=xy[,1], extract(logo, xy[,2:3]))) # criando um subset com dados da imagem para criar o modelo
logo <- brick(system.file("external/rlogo.grd", package="raster"))
v <- data.frame(cbind(pa=xy[,1], extract(logo, xy[,2:3]))) # criando um subset com dados da imagem para criar o modelo
v
r1 <- predict(logo, model, progress='text') # prediz valores para a layer baseado em dados prévios da imagem.
model <- glm(formula=pa~., data=v)
summary(model)
v # as variáveis de respota têm o nome das layers
r1 <- predict(logo, model, progress='text') # prediz valores para a layer baseado em dados prévios da imagem.
plot(r1)
points(p, bg='blue', pch=21) # coloca os pontos utilizados para a predição
points(a, bg='red', pch=21)
r1 # raster resultado do modelo de predição
logo
sr <- sampleRandom(logo, 100) # legal isso, acho que vou precisar para os objetos de raster com muitas células
sr
pca <- prcomp(sr)
summary(pca)
loadings(pca)
biplot(pca)
x <- predict(logo, pca, index=1:3)
plot(x)
x
plot(logo)
model <- plsr(formula=pa~., data=v)
summary(model)
predict(model, v[1:5,]) # interessante jeito de gerar dados para prever
pfun <- function(x, data) {
y <- predict(x, data)
d <- dim(y)
dim(y) <- c(prod(d[1:2]), d[3])
y
}
pp <- predict(logo, model, fun=pfun, index=1:3)
plot(pp) # muito bom também, mas muito complexo.
library(kernlab)
model <-lssvm(pa~.,data=v)
rfmod <- randomForest(pa~., data=v)
model <-lssvm(pa~.,data=v)
v
model <-lssvm(pa~red+green+blue,data=v)
pa
v <- data.frame(cbind(pa=xy[,1], extract(logo, xy[,2:3]))) # criando um subset com dados da imagem para criar o modelo
pa
y
x
v
attach(v)
pa
model <-lssvm(pa~red+green+blue,data=v)
iris
lir <- lssvm(Species~.,data=iris)
ll <-lssvm(Sepal.Length~.,data=iris)
str(iris)
model <-ksvm(pa~red+green+blue,data=v)
r4 <-predict(logo,model)
plot(r4)
model <-ksvm(pa~red+green,data=v)
r4 <-predict(logo,model)
plot(r4)
summary(model)
modwl
model
model1 <-ksvm(pa~red+green,data=v,kernel=polydot)
data(spam)
## create test and training set
index <- sample(1:dim(spam)[1])
spamtrain <- spam[index[1:floor(dim(spam)[1]/2)], ]
spamtest <- spam[index[((ceiling(dim(spam)[1]/2)) + 1):dim(spam)[1]], ]
## train a support vector machine
filter <- ksvm(type~.,data=spamtrain,kernel="rbfdot",
kpar=list(sigma=0.05),C=5,cross=3)
filter
## predict mail type on the test set
mailtype <- predict(filter,spamtest[,-58])
## Check results
table(mailtype,spamtest[,58])
model1 <-ksvm(pa~red+green,data=v,kernel=polydot, +
kpar=list(sigma=0.05),C=5,cross=3)
model1 <-ksvm(pa~red+green,data=v,kernel="polydot", +
kpar=list(sigma=0.05),C=5,cross=3)
model1 <-ksvm(pa~red+green,data=v,kernel="polydot")
model1
model
r5 <-predict(logo,model1)
plot(r5)
plot(r4)
library("caret", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
library("nnet", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
v
model <-pcaNNET(V[,2:4],pa,data=v)
model <-pcaNNet(V[,2:4],pa,data=v)
model <-pcaNNet(v[,2:4],pa,data=v)
model <-pcaNNet(v[,2:4],pa,data=v,size=5)
model <-pcaNNet(v[,2:4],pa,data=v,size=3)
model <-pcaNNet(v[,2:4],pa,data=v,size=2)
model <-pcaNNet(v[,2:4],pa,data=v,size=6)
model <-pcaNNet(v[,2:4],pa,data=v,size=11)
model <-pcaNNet(v[,2:4],pa,data=v,size=5)
model
model <-pcaNNet(v[,2:4],pa,data=v,size=5)
r6 <-predict(logo,model)
plot(r6)
spplot(r6)
spplot(r5)
model <-pcaNNet(v[,2:4],pa,data=v,size=10)
model
r6 <-predict(logo,model)
plot(r6)
spplot(r6)
model <-pcaNNet(v[,2:4],pa,data=v,size=30)
model
r6 <-predict(logo,model)
plot(r6)
spplot(r6)
model <-pcaNNet(v[,2:4],pa,data=v,size=2)
model
r6 <-predict(logo,model)
plot(r6)
spplot(r6)
nnetFit <- train(v[,2:4],pa, TrainClasses,
method = "pcaNNet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
nnetFit <- train(v[,2:4],pa,
method = "pcaNNet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
nnetFit
nnetFit(finalModel)
nnetFit
nnetFit <- train(v[,2:4],pa,
method = "pcaNNet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
nnetFit
model <-pcaNNet(v[,2:4],pa,data=v,size=3,decay=0.1)
model
r6 <-predict(logo,model)
plot(r6)
install.packages("KRLS")
N <- 200
x1 <- rnorm(N)
x2 <- rbinom(N,size=1,prob=.2)
y <- x1^3 + .5*x2 + rnorm(N,0,.15)
X <- cbind(x1,x2)
library("KRLS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
krlsout <- krls(X=X,y=y)
summary(krlsout)
plot(krlsout)
model2 <-krls(X=v[,2:4].y=pa)
model2 <-krls(X=v[,2:4],y=pa)
model2
summary(model2)
r7 <-predict(logo,model2)
plot(r7)
model20 <- train(v[,2:4],pa,
method = "krlsRadial",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
model20 <- train(v[,2:4],pa,
method = "krlsRadial",
tuneLength = 2,
trace = FALSE,
maxit = 100)
warning()
warnings()
model20 <- train(v[,2:4],pa,
method = "krlsRadial")
model20
model2 <-krls(X=v[,2:4],y=pa,sigma = 10)
model2
summary(model2)
r7 <-predict(logo,model2)
r7 <-predict(logo,model2)
plot(r7)
model2 <-krls(X=pa,y=v[,2],sigma = 10)
model2
summary(model2)
r7 <-predict(logo,model2)
library("dismo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
r <- raster(system.file("external/rlogo.grd", package="raster"))
# presence points
p <- matrix(c(17, 42, 85, 70, 19, 53, 26, 84, 84, 46, 48, 85, 4, 95, 48, 54, 66, 74, 50, 48,
28, 73, 38, 56, 43, 29, 63, 22, 46, 45, 7, 60, 46, 34, 14, 51, 70, 31, 39, 26), ncol=2)
# absence points
a <- matrix(c(30, 23, 5, 5, 31, 33, 91, 63, 60, 88, 93, 97, 65, 68, 85, 97, 35, 32, 29, 55,
3, 8, 19, 71, 49, 36, 69, 41, 20, 28, 18, 9, 5, 9, 25, 71, 8, 32, 46, 60), ncol=2)
idw <- geoIDW(p, a)
prd <- predict(r, idw)
## Not run:
plot(prd)
points(p)
points(a, pch='x')
r3
r4
install.packages("sspline")
