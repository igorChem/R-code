library(raster)
library(sp)
library(rgdal)
library(gstat)
library(maptools)
library(fields)
library(pls)
#Tutorial  Spatial Interpolation with R

 
#These first statements provide an overall look at the data and gives you an idea of the spatial distribution of the data 
#points.
require(gstat)
data(meuse)
names(meuse)
summary(meuse)
hist(meuse$zinc)
plot(meuse$x,meuse$y,asp=1) 

# A full look at the data structure (class, etc...) can be obtained by:
str(meuse) # apresenta a classe e head das variáveis

coordinates(meuse) = ~x + y # convert data to spatial points data frame, meuse era data.frame
class(meuse) # spatialPointsDataframe
data(meuse.grid)# this is gridded data for the meuse data set
str(meuse.grid) 
class(meuse.grid) #data frame
coordinates(meuse.grid) = ~x + y # converts to spatial class
gridded(meuse.grid) <- TRUE 
class(meuse.grid) #spatialpixels data frame

#Trend surfaces are developed by fitting 'low'-ormeuder polynomial functions of the location variables, and then 
#evaluating the resulting model over a grid of points. The nature of the resulting surface is controlled by the order of the polynomial


# classes dos objetos e variáveis 


zn.tr1 <- krige(log(zinc) ~ x + y , meuse, meuse.grid)
# ordinary or weighted least squares prediction. bem ruim
image(zn.tr1)

plot(meuse, pch = 1, cex = sqrt(meuse$zinc)/20, add = TRUE) # legal o cex
legVals <- c(100, 200, 500, 1000, 2000)
legend("left", legend=legVals, pch = 1, pt.cex = sqrt(legVals)/20, bty = "n",
  title="measured, ppm", cex=1, y.inter=0.9) # muito bom esse controle de legenda
title("Meuse Zinc Measurements-degree=1")

zn.tr2 <- krige(log(zinc) ~ x + y + I(x*y) + I(x^2) + I(y^2), meuse,          
meuse.grid)
image(zn.tr2)
plot(meuse, pch = 1, cex = sqrt(meuse$zinc)/20, add = TRUE)
legend("left", legend=legVals, pch = 1, pt.cex = sqrt(legVals)/20, bty = "n",
  title="measured, ppm", cex=1, y.inter=0.9)
title("Meuse Zinc Measurements-degree=2")

zn.lm <- lm(log(zinc) ~ x + y + I(x*y) + I(x^2) + I(y^2), meuse)
meuse$fitted.lmz <- predict(zn.lm, meuse) - mean(predict(zn.lm, meuse))
meuse$residuals.lmz <- residuals(zn.lm)
print(spplot(meuse,c("fitted.lmz","residuals.lmz"),col.regions=heat.colors(10)
,cex=1.2))
summary(zn.lm)

# Inverse Distance Weighting Interpolation (IDW)
#First we'll embellish the plots:

data(meuse.riv) # matrix
# Polygon, create spatial objects
# transform matrix in a spatial objects
 meuse.sp <- SpatialPolygons(list(Polygons(list(Polygon(meuse.riv)), 
"meuse.riv")))
 meuse.lt = list(riv = list("sp.polygons", meuse.sp, fill = "grey"),
      pts = list("sp.points", meuse, pch = 3, cex = 0.5, col = 
"black"))

#Doing IDW in gstat.

 zn.idw = idw(log(zinc) ~ 1, meuse, meuse.grid)
     spplot(zn.idw, "var1.pred", sp.layout = meuse.lt, main = "log(zinc),     
inverse distance interpolation-default")

## meuse SpatialPointsDataFrame
##meuse.grid, spatialPixelsDataFrame
zn.idw6 <- krige(log(zinc) ~ 1, meuse, meuse.grid,nmax=6)

meuse.grid$idp05 = idw(log(zinc) ~ 1, meuse, meuse.grid, idp = 0.5)$var1.pred
meuse.grid$idp1 = idw(log(zinc) ~ 1, meuse, meuse.grid, idp = 1)$var1.pred
meuse.grid$idp5 = idw(log(zinc) ~ 1, meuse, meuse.grid, idp = 5)$var1.pred
meuse.grid$idp10 = idw(log(zinc) ~ 1, meuse, meuse.grid, idp = 10)$var1.pred
spplot(meuse.grid, c("idp05", "idp1", "idp5", "idp10"), sp.layout =     
      meuse.lt, main = "log(zinc), inverse distance interpolation")

#Thiessen polygons in gstat
#Let's take a quick look on how to do Voronoi tessellation with 
#gstat:
zn.tp = krige(log(zinc) ~ 1, meuse, meuse.grid, nmax = 1)#for this search
# the neighborhood is set to nmax=1
 image(zn.tp["var1.pred"])
 points(meuse, pch = "+", cex = 0.65)
 cc = coordinates(meuse)
 library(tripack)
 plot(voronoi.mosaic(cc[, 1], cc[, 2]), do.points = FALSE, add = TRUE)
 title("Thiessen (or Voronoi) polygon interpolation of log(zinc)")

# AKIMA package

library(akima)
data(meuse)
meuse.zinc <- data.frame(cbind(meuse$x,meuse$y,meuse$zinc))
par(mfcol=c(1,1))
meuse.akim <- interp(meuse.zinc$X1, meuse.zinc$X2, meuse.zinc$X3)
image(meuse.akim,,xlab="", ylab="",asp=1)
contour(meuse.akim,add=TRUE,, levels = seq(100,2000,200))
title(main="Bilinear Interpolation (Akima - default)") 
points(meuse.zinc)


# use triangulation library to show underlying triangulation for bilinear interpolation:
# you can see how the contouring is done from the construction  of these triangles.
if(library(tripack, logical.return=TRUE))
   plot(tri.mesh(meuse), add=TRUE, lty="dashed")


# Loess surfaces

require(stats)


par(mfcol=c(1,1), pty="s")
     # degree=2
meuse.loess <- loess(X3 ~ X1 * X2, meuse.zinc, degree=2, span = 0.25, 
normalize=F)
meuse.mar <- list(X1 = seq(178500,181500, length=200) , X2=seq(329500,334000, 
length=200))
meuse.lo <- predict(meuse.loess, newdata=expand.grid(meuse.mar), 
se=TRUE)
image(meuse.mar$X1,meuse.mar$X2,meuse.lo[[1]],xlab="x", ylab="y")
contour(meuse.mar$X1,meuse.mar$X2,meuse.lo[[1]],add=TRUE,levels=seq(100,2000,2
00))
points(meuse);title("Meuse zinc Loess degree = 2")


aq.grid <- expand.grid(X1=meuse.zinc$X1,X2=meuse.zinc$X2)

require(tripack)
def.hull <- chull(meuse.zinc$X1,meuse.zinc$X2)
my.hull <- list(x=meuse.zinc$X1[def.hull],y=meuse.zinc$X2[def.hull])
my1.hull <- tri.mesh(my.hull$x,my.hull$y)
in.hull <- in.convex.hull(my1.hull, aq.grid$X1,aq.grid$X2)
Now predict the loess surface with the 
predict
 function:
pred.trend <- predict(meuse.loess, aq.grid)
## plot the trend surface
require(lattice)
pred.trend[!in.hull] <- NA # for data point only within the convex hull
levelplot(pred.trend ~ X1*X2, data=aq.grid,
      contour=TRUE, pretty=T, aspect=1,main=list("meuse loess surface-      
degree=2",cex=1.5))


##Kriging in gstat

coordinates(meuse) = ~x + y # convert data to spatial points data frame
class(meuse)
#With the meuse gridded data, convert it to a spatial pixel data frame:
gridded(meuse.grid) = TRUE
class(meuse.grid)
#Once we see that these two data sets are spatial classes, we are, now, ready to perform the kriging operations. Fist, 
#calculate the empirical variogram and fit a model to it.
vgm1 <- variogram(log(zinc)~1, meuse)
plot(vgm1, plot.numbers = TRUE, pch = "+")
m <- fit.variogram(vgm1,vgm(.59,"Sph",896,.05))
plot(vgm1, model=m)
show.vgms() # various models for fitting variogram in gstat
m <- vgm(.59, "Sph", 874, .04)


x.k <- krige(log(zinc)~1, meuse, meuse.grid, model = m)
spplot(x.k["var1.pred"], main = "Meuse zinc ordinary kriging log predictions")
x.k$sek <- sqrt(x.k$var1.var)
spplot(x.k,zcol="sek",  main = "Meuse zinc ordinary kriging se")
summary(x.k)

data(meuse.riv)# outline of the river
meuse.lst <- list(Polygons(list(Polygon(meuse.riv)), "meuse.riv"))
meuse.sr <- SpatialPolygons(meuse.lst)
image(meuse.grid["dist"])# one of the variables in meuse.grid     
plot(meuse.sr, add=TRUE)
title("distance to river")
par(mfrow=c(1,2))
plot(zinc ~ dist, meuse)
plot(log(zinc) ~ sqrt(dist), meuse)
abline(lm(log(zinc) ~ sqrt(dist), meuse))

zn.lm <- lm(log(zinc) ~ sqrt(dist), meuse)
meuse$fitted.s <- predict(zn.lm,meuse)-mean(predict(zn.lm,meuse))
meuse$residuals <- residuals(zn.lm)
spplot(meuse,c("fitted.s","residuals"))

vm.uk <- variogram(log(zinc)~sqrt(dist), meuse)
plot(vm.uk, plot.numbers = TRUE, pch = "+")
m.uk <- fit.variogram(vm.uk,vgm(.3,"Sph",800,.06))
plot(vm.uk, model=m.uk)
m.uk <- vgm(.159, "Sph", 880, .05)
ko.uk <- krige(log(zinc)~ x+y, meuse,meuse.grid,model=m.uk)
pts <- list("sp.points",meuse,pch=3,col="black")
meuse.layout <- list(pts)
spplot(ko.uk["var1.pred"], sp.layout=meuse.layout, main = "universal 
kriging predictions-Zn/distance river ")
ko.uk$sek <- sqrt(ko.uk$var1.var)
spplot(ko.uk,zcol='sek',  sp.layout=meuse.layout, main = "universal 
kriging se-Zn(covariate)")
summary(ko.uk)

ko.uk$predt <- exp(ko.uk$var1.pred)
spplot(ko.uk["predt"], sp.layout=meuse.layout, main = "UK covariate predictions-Meuse zinc log/backtrans(Zn)")

Plot all predictions next to each other:
meuse.grid$zn.id <- zn.idw$var1.pred
meuse.grid$zn.tr2 <- zn.tr2$var1.pred
meuse.grid$zn.ok <- x.k$var1.pred
meuse.grid$zn.uk <- ko.uk$var1.pred
spplot(meuse.grid[c("zn.ok", "zn.uk", "zn.id", "zn.tr2")])

##Cross Validation

kcv <- krige.cv(log(zinc) ~ 1, meuse, model=m, nfold=10)
summary(kcv)
Some statistics:
# mean error, ideally 0:
mean(kcv$residual)
(rmse <- sqrt(mean(kcv$residual^2)))
rmse/sd(meuse$zinc)
#correlation observed and predicted, ideally 1
cor(kcv$observed, kcv$observed - kcv$residual)
#mean(k.cv$residual^2/k.cv$var1.var)
#correlation predicted and residual, ideally 0
cor(kcv$observed - kcv$residual, kcv$residual)
bubble(kcv, "zscore", main = "zinc:10-fold CV-zscores")
#zscores-residual/kriging standard error
