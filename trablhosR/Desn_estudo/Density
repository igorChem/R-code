# Estudo da dendisdade de soluções de liquidos ionicos 


# Índice 

# 0. First ajusts 
# 1. Load data and create tables and variables
# 2. Plots and exploratory data 
# 3. Modelos 
# 4. teste dos modelos 

#=================================================================================

# 0. first adjusts

# set dir ------------------------------------------------------------------------

setwd("~/r/Desn_estudo")

# load packages-------------------------------------------------------------------

.libPaths("/home/igor/R/x86_64-pc-linux-gnu-library/3.0")

library(pls)
library(caret)
library(KRLS)

#=================================================================================

# 1.Load data

#tables---------------------------------------------------------------------------

tab1 <-read.delim("dens") # tabela primária de dados
tab2 <-subset(tab1,IL=="[BMIM][BF4]")
tab2 <-subset(tab2,!massfractionIL==1)


# cores para a função persp-------------------------------------------------------

# tem que atribuir a função da curva de resposta para z --------------------------

z <-Densidade
jet.colors <- colorRampPalette(c("purple","blue", "green","yellow","orange","red"))

nbcol <- 1000
color <- jet.colors(nbcol)
nrz <- nrow(z)
ncz <- ncol(z)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
facetcol <- cut(zfacet, nbcol)

#---------------------------------------------------------------------------------

#=================================================================================


# 2. Plots and exploratory data 

atach(tab1) 

#Estudo da tabela 1---------------------------------------------------------------

names(tab1)
head(tab1)
summary(tab1)
str(tab1)

# plots da densidade -------------------------------------------------------------

plot(Density~Temperature.K.)
#---------------------------------------------------------------------------------
plot(Density~massfractionIL) # esse é o mais provável
plot(Density~molarfractionIL) # esse não da 
plot(Density~C.mol.L.) # mal distribuido 
#---------------------------------------------------------------------------------

# boxplots------------------------------------------------------------------------

boxplot(Density~Alkyl.Lenght)
boxplot(Density~MW)
boxplot(Density~Mwanion)
boxplot(Density~Mwcation)
boxplot(Density~IL)

#---------------------------------------------------------------------------------

xyplot(Density.pure.~Temperature.K.*(Density.pure.-1)
				   |Anion,auto.key=T)

xyplot(Density~(massfractionIL*(Density.pure.-0.997))
				      |IL,auto.key=T)

#=================================================================================
# 3. Modelos 

# 3.1 modelo multivariado --------------------------------------------------------

# 3.1.1 variáveis de datasets-----------------------------------------------------

tab2 <-subset(tab1,!Density=="NA") 
tab2 <-subset(tab2,!Density.pure.=="NA")
attach(tab2)
mf <-massfractionIL*(Density.pure.-1) # variável de concentração

# 3.1.2 modelo -------------------------------------------------------------------

mod1 <- lm(Density~mf+Temperature.K.)
summary(mod1)
predplot(mod1) 

# 3.1.3 plots --------------------------------------------------------------------

# predplot------------------------------------------------------------------------
tiff("predplot.tiff", width = 6, height = 7, units = 'in', res = 125)
predplot(mod1,ylab="Densidade Prevista",xlab="Densidade experimental")
dev.off()

# residuals por anions------------------------------------------------------------
tiff("erroanion.tiff", width = 8, height = 6, units = 'in', res = 125)
plot(residuals(mod1)~Anion)
dev.off()

# residuals por cations-----------------------------------------------------------
tiff("errocation.tiff", width = 6, height = 7, units = 'in', res = 125)
plot(residuals(mod1)~Cation)
dev.off()

#---------------------------------------------------------------------------------

# 3d plot; response curve-------------------------------------------------------- 

# Definir as variavais para a função --------------------------------------------

MFdp <-seq(0,0.3,length=30)
Temperatura <-seq(298,343,length=30)

#Montar a função que resultara em densidade

f1 <-function(MFdp,Temperatura) 
	{1.069609-0.000224*Temperatura+0.989895*MFdp}

# calcular a densidade para o produto matricial dos comprimentos estabelecidos 
Densidade <-outer(MFdp,Temperatura,f1)

Z <-Densidade ## definição dessa variavel para a paleta de cores 

tiff("3dplot",width = 6, height = 7, units = 'in', res = 125)
      persp(MFdp,Temperatura,Densidade,
	phi = 20,theta = -40,shade=T ,
	ticktype = "detailed",
	col=color[facetcol],
	ylab="Temperatura (C°)",
	xlab="MFdp",
	zlab="Densidade(g/cm³)")
dev.off()


# 3.2 Machine learning -----------------------------------------------------------

# modelo de KRLS
# tabelas e variáveis-------------------------------------------------------------

w <- data.frame(MFdp=mf,Temperature.K.,MManion=Mwanion,MMcation=Mwcation,Density)
w <- na.omit(w)

# creating partition for train and test sets--------------------------------------
set.seed(107)
inTrain <-createDataPartition(y=w[,5],
			     p=0.8,
			     list=FALSE)
TrainW <-w[inTrain,]
TestW  <-w[-inTrain,]

# Modelo -------------------------------------------------------------------------

krls01 <-krls(X=TrainW[,-5],y=TrainW[,5])

summary(krls01)

#plots do modelo ----------------------------------------------------------------

predicted <-predict.krls(krls01,newdata=TestW[,-5])
test <-cbind(TestW[5],predicted$fit)

tiff("predkrls",width = 6, height = 7, units = 'in', res = 125)

plot(fitted(krls01)~TrainW[,5],col="blue",ylab="Densidade estimada",xlab="Densidade experimental",main="modelo KRLS")
points(TestW[,5],predicted$fit,col="red")
     legend("bottomright",legend=c("Dados de Teste","Dados do modelo"),
            pch=c(1,1),lwd=c(2,2),col=c("red","blue"),cex=.8)
dev.off()

#---------------------------------------------------------------------------------

tiff("krls1",width = 6, height = 7, units = 'in', res = 125)
par(mfrow=c(2,2))
plot(krls01)
dev.off()

#---------------------------------------------------------------------------------

#=================================================================================

# Índice de refração ------------------------------------------------------------

attach(tab1) 
tab2 <-subset(tab1,!Refractive.index=="NA")
detach(tab1)

attach(tab2)
bwplot(Refractive.index)
bwplot(Density)

densityplot(Refractive.index)

tiff("refvsden.tif",width=6,height=6,units="in",res=200)
xyplot(Density~Refractive.index,data=tab2,xlab="Índice de Refração",ylab="Densidade (g/cm³)",groups=y,auto.key=list(space="right"),drop.unused.levels=T) 
dev.off()
# faltando um ajuste
plot(Refractive.index~molarfractionIL) # bem linear 
plot(Refractive.index~Densitynsity.pure.) # sem relação 
plot(Refractive.index~MW)
plot(Refractive.index~Mwcation)
plot(Refractive.index~Mwanion)
plot(Density~molarfractionIL)


mf <-massfractionIL*(Density.pure.-1)

plot(log(Density)~massfractionIL)

plot(Density~mf)

fit1 <-lm(Density~Refractive.index)
summary(fit1)

fit2 <-lm(Density~Refractive.index+mf) # R^2 0.9927------------------------------
summary(fit2)

tiff("pred01.tif",width=6,height=6,units="in",res=200)
predplot(fit2,ylab="Densidade Prevista",xlab="Densidade experimental")
dev.off()

# modelos lineares para bmimbf4--------------------------------------------------

mod1.lm <-lm(Density~molarfractionIL)
summary(mod1.lm)

#-------------------------------------------------------------------------------
Coefficients:
                 Estimate Std. Error t value Pr(>|t|)    
(Intercept)     0.9932922  0.0008725  1138.5   <2e-16 ***
molarfractionIL 2.0404843  0.0190919   106.9   <2e-16 ***
#-------------------------------------------------------------------------------

mod2.lm <-lm(molarfractionIL~Refractive.index)
summary(mod2.lm)


# densidade em função do índice de refração para bmimbf4 ------------------------

density.mod2.lm <-function (RI,temperatura) {

	t <-temperatura
	ri=RI-(t-20)*0.00045	 
 	ri2 =  2.0404843*(0.56399*ri-0.73670)+0.9932922
	density.bf4= ri2-(20-t)*0.00045	
        return(density.bf4)} 

inp1 <-read.delim("inp1")

density.mod2.lm(inp1[,1],inp1[,2])

1.028589 1.054597 1.078764 1.078764 1.061502 1.089122 1.077614 1.112138
1.059201 1.082217 1.101781



# modelo krls para refractive index----------------------------------------------

wr <- data.frame(MFdp=mf,Density,Refractive.index)
wr <-na.omit(wr)

# creating partition for train and test sets--------------------------------------
set.seed(107)
inTrain <-createDataPartition(y=wr[,2],
			     p=0.8,
			     list=FALSE)
TrainWr <-wr[inTrain,]
TestWr  <-wr[-inTrain,]

# Modelo -------------------------------------------------------------------------

krls02 <-krls(X=TrainWr[,-2],y=TrainWr[,2])

summary(krls02)

#-------------------------------------------------------------------------------

summary(krls02)
* *********************** *
Model Summary:

R2: 0.9982881 

Average Marginal Effects:
                       Est Std. Error  t value     Pr(>|t|)
MFdp             0.5432612 0.03956363 13.73133 4.085815e-09
Refractive.index 0.1712200 0.01134283 15.09500 1.277051e-09

Quartiles of Marginal Effects:
                        25%       50%       75%
MFdp             0.19830068 0.4233611 0.9327373
Refractive.index 0.05495989 0.1768608 0.2938145


tiff("predkrls2",width = 6, height = 7, units = 'in', res = 125)

plot(fitted(krls02)~TrainWr[,2],col="blue",ylab="Densidade estimada",xlab="Densidade experimental",main="modelo KRLS")
     
dev.off()


# --------------------------------------------------------------------------------

tba <-read.table("tbasles",header=T)

str(tba) 
summary(tba)
names(tba) 

attach(tba)

bwplot(densidade,groups=temperatura) 

plot(densidade~Nd)
plot(densidade~exp(-Nd/10))

plot(densidade~temperatura)
plot(exp(-densidade)~conc)

mod.lm1 <-lm(densidade~Nd)
summary(mod.lm1)

mod.lm2 <-lm(densidade~Nd+temperatura)
View(tba)

tba2 <-subset(tba, !conc<40)
attach(tba2) 

mod.lm3 <-lm(densidade~Nd)
summary(mod.lm3)

tba3 <-read.table("newAmostras",header=T)

riprev <-function(RI) {
		e = 0.71899+0.17667*RI
	return(e)}
	
attach(tba3)

riprev(RI=RI)



