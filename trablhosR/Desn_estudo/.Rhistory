q()
Poster para congresso para a inglaterra
# Summary
# 1-Tables
# 2-PCA
# 3-Biplots and linearizations
# 3.1- Best results of the biplots
# 4- PCA para diferenças dos os IL
# 5- first PLS models
# 6- plots para trends ionicos
# 7- modelos para o poster
# 8- gráficos para o poster
# 0-packages
library("pls")
library("lattice")
# 1-Tables
ionic1 <-read.table("r/ionic", header=T, row.names=1)
yield.mod1 <-subset(ionic1,yield1=="yes")[,1:20]
yield.mod2 <-subset(ionic1,yield2=="yes")[,1:20]
selec.mod1 <-subset(ionic1,select1=="yes")[,1:20]
selec.mod2 <-subset(ionic1,select2=="yes")[,1:20]
ionic2 <-subset(ionic1,Co2.sol!=0)
ionic3 <-subset(ionic2,select2=="no")
View(ionic1)
xyplot(Yield+TON+TOF+select~a.radii,data=ionic1,groups=znbr,auto.key=T)
cor(ionic1[,1:16])
library("abind", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
detach("package:abind", unload=TRUE)
install.packages("raster")
library("raster", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
r <- raster(ncol=36,nrow=18)
r[] <- NA
r[500] <- 1
b <- buffer(r, width=5000000)
#plot(b)
plot(b)
rgdal
logo <- brick(system.file("external/rlogo.grd", package="raster"))
names(logo)
par(mfrow=c(2,2))
plotRGB(logo, main='logo')
plot(logo, 1, col=rgb(cbind(0:255,0,0), maxColorValue=255))
plot(logo, 2, col=rgb(cbind(0,0:255,0), maxColorValue=255))
plot(logo, 3, col=rgb(cbind(0,0,0:255), maxColorValue=255))
p <- matrix(c(48, 48, 48, 53, 50, 46, 54, 70, 84, 85, 74, 84, 95, 85,
66, 42, 26, 4, 19, 17, 7, 14, 26, 29, 39, 45, 51, 56, 46, 38, 31,
22, 34, 60, 70, 73, 63, 46, 43, 28), ncol=2)
a <- matrix(c(22, 33, 64, 85, 92, 94, 59, 27, 30, 64, 60, 33, 31, 9,
99, 67, 15, 5, 4, 30, 8, 37, 42, 27, 19, 69, 60, 73, 3, 5, 21,
37, 52, 70, 74, 9, 13, 4, 17, 47), ncol=2)
# extract values for points
xy <- rbind(cbind(1, p), cbind(0, a))
v <- data.frame(cbind(pa=xy[,1], extract(logo, xy[,2:3])))
#build a model, here an example with glm
model <- glm(formula=pa~., data=v)
#predict to a raster
r1 <- predict(logo, model, progress=
'
text
'
)
plot(r1)
points(p, bg=
'
blue
'
, pch=21)
points(a, bg=
'
red
'
, pch=21)
# use a modified function to get a RasterBrick with p and se
# from the glm model. The values returned by
'
predict
'
are in a list,
# and this list needs to be transformed to a matrix
predfun <- function(model, data) {
v <- predict(model, data, se.fit=TRUE)
cbind(p=as.vector(v$fit), se=as.vector(v$se.fit))
}
# predfun returns two variables, so use index=1:2
r2 <- predict(logo, model, fun=predfun, index=1:2)
## Not run:
# You can use multiple cores to speed up the predict function
# by calling it via the clusterR function (you may need to install the snow package)
beginCluster()
r1c <- clusterR(logo, predict, args=list(model))
r2c <- clusterR(logo, predict, args=list(model=model, fun=predfun, index=1:2))
model <- glm(formula=pa~., data=v)
model
summary(model)
if (require(rgdal)) {
filename <- system.file("external/lux.shp", package="raster")
filename
p <- shapefile(filename)
shapefile(p,
'
copy.shp
'
)
## End(Not run)
}
install.packages("rgdal")
if (require(rgdal)) {
filename <- system.file("external/lux.shp", package="raster")
filename
p <- shapefile(filename)
shapefile(p,
'
copy.shp
'
)
## End(Not run)
}
install.packages("rgdal")
p <- matrix(c(48, 48, 48, 53, 50, 46, 54, 70, 84, 85, 74, 84, 95, 85,
66, 42, 26, 4, 19, 17, 7, 14, 26, 29, 39, 45, 51, 56, 46, 38, 31,
22, 34, 60, 70, 73, 63, 46, 43, 28), ncol=2)
a <- matrix(c(22, 33, 64, 85, 92, 94, 59, 27, 30, 64, 60, 33, 31, 9,
99, 67, 15, 5, 4, 30, 8, 37, 42, 27, 19, 69, 60, 73, 3, 5, 21,
37, 52, 70, 74, 9, 13, 4, 17, 47), ncol=2)
# extract values for points
xy <- rbind(cbind(1, p), cbind(0, a))
v <- data.frame(cbind(pa=xy[,1], extract(logo, xy[,2:3])))
#build a model, here an example with glm
model <- glm(formula=pa~., data=v)
mo#predict to a raster
r1 <- predict(logo, model, progress=
'
text
'
)
plot(r1)
points(p, bg=
'
blue
'
, pch=21)
points(a, bg=
'
red
'
, pch=21)
are in a list,
# and this list needs to be transformed to a matrix
predfun <- function(model, data) {
v <- predict(model, data, se.fit=TRUE)
cbind(p=as.vector(v$fit), se=as.vector(v$se.fit))
}
r2 <- predict(logo, model, fun=predfun, index=1:2)
install.packages(c("ggplot2", "Hmisc", "Rcmdr"))
install.packages("rgeos")
install.packages("rgdal")
if (require(rgdal)) {
filename <- system.file("external/lux.shp", package="raster")
filename
p <- shapefile(filename)
shapefile(p,
'
copy.shp
'
)
## End(Not run)
}
View(v)
p
filename
install.packages("rasterVis")
plot(p)
plot(p)
plot(p)
plot(filename)
file <- system.file("external/test.grd", package="raster")
s <- stack(file, file, file)
r <- raster(file)
s <- addLayer(s, r/2, r*2)
s
s <- dropLayer(s, c(3, 5))
nlayers(s)
plot(s)
file
r
plot(r)
plot(s)
b <- brick(system.file("external/rlogo.grd", package="raster"))
animate(b, n=1)
b <- brick(system.file("external/rlogo.grd", package="raster"))
animate(b, n=1)
b <- brick(system.file("external/rlogo.grd", package="raster"))
animate(b, n=1)
r <- raster(ncol=3, nrow=3)
r[] <- sqrt(1:ncell(r))
r[3:5] <- NA
as.data.frame(r)
s <- stack(r, r*2)
as.data.frame(s)
as.data.frame(s, na.rm=TRUE)
plot(s)
r <- raster(ncol=3, nrow=3)
r[] <- 1:ncell(r)
as.raster(r)
r <- raster(ncol=3, nrow=3)
r[] <- 1:ncell(r)
plot(as.raster(r))
f <- system.file("external/test.grd", package="raster")
r <- raster(f)
barplot(r, digits=-2, las=2, ylab=
'
Frequency
'
)
op <- par(no.readonly = TRUE)
par(mai = c(1, 2, .5, .5))
barplot(r, breaks=10, col=c(
'
red
'
,
'
blue
'
), horiz=TRUE, digits=NULL, las=1)
par(op)
f <- system.file("external/test.grd", package="raster")
r <- raster(f)
barplot(r, digits=-2, las=2, ylab=
'
Frequency
'
)
op <- par(no.readonly = TRUE)
par(mai = c(1, 2, .5, .5))
barplot(r, breaks=10, col=c(
'
red
'
,
'
blue
'
), horiz=TRUE, digits=NULL, las=1)
par(op)
b <- brick(system.file("external/rlogo.grd", package="raster"))
b
nlayers(b)
names(b)
extract(b, 870)
plot(b)
library(rgdal)
ilc <- read.delim("~/r/ILCsimulation/ilc", row.names=1, comment.char="#")
View(ilc)
ilc <- read.delim("~/r/ILCsimulation/ilc", comment.char="#")
View(ilc)
setwd("~/r/Desn_estudo")
# load packages-------------------------------------------------------------------
.libPaths("/home/igor/R/x86_64-pc-linux-gnu-library/3.0")
library(pls)
library(caret)
library(KRLS)
tab1 <-read.delim("dens") # tabela primária de dados
tab2 <-subset(tab1,!Density=="NA") 
tab2 <-subset(tab2,!Density.pure.=="NA")
attach(tab3)
mf <-massfractionIL*(Density.pure.-1)
attach(tab2)
mod1 <- lm(Density~mf+Temperature.K.)
summary(mod1)
mf <-massfractionIL*(Density.pure.-1) # variável de concentração
mod1 <- lm(Density~mf+Temperature.K.)
summary(mod1)
tiff("predplot.tiff", width = 6, height = 7, units = 'in', res = 230)
plot(residuals(mod1)~Anion)
dev.off()
tiff("predplot.tiff", width = 7, height = 6, units = 'in', res = 230)
plot(residuals(mod1)~Anion)
dev.off()
tiff("predplot.tiff", width = 8, height = 6, units = 'in', res = 230)
plot(residuals(mod1)~Anion)
dev.off()
tab3
tab2
Anion
?droplevels
tab2 <-droplevels(tab2,Anion !=c("PF6"))
attach(tab2)
Anion
tab2
Anion
tab2 <-droplevels(tab2,Anion !="PF6")
attach(tab2)
Anion
tab2 <-droplevels(tab2,Anion ="PF6")
detach(tab1)
detach(tab2)
attach(tab2)
tab2 <-droplevels(tab2,Anion ="PF6")
attach(tab2)
Anion
plot(residuals(mod1)~Anion)
tiff("predplot.tiff", width = 8, height = 6, units = 'in', res = 230)
plot(residuals(mod1)~Anion)
dev.off()
tiff("predplot.tiff", width = 6, height = 7, units = 'in', res = 230)
plot(residuals(mod1)~Cation)
dev.off()
tiff("erroanion.tiff", width = 8, height = 6, units = 'in', res = 230)
plot(residuals(mod1)~Anion)
dev.off()
# residuals por cations-----------------------------------------------------------
tiff("errocation.tiff", width = 6, height = 7, units = 'in', res = 230)
plot(residuals(mod1)~Cation)
dev.off()
w <- data.frame(mf,Temperature.K.,Mwanion,Mwcation,Density)
w <- na.omit(w)
set.seed(107)
inTrain <-creatDataPartition(y=Density,
     p=0.8,
     list=FALSE)
TrainW <-w[inTrain]
TestW  <-w[-inTrain]
inTrain <-createDataPartition(y=Density,
     p=0.8,
     list=FALSE)
TrainW <-w[inTrain]
TestW  <-w[-inTrain]
krls01 <-krls(x=Train[-5].y=Train[5])
krls01 <-krls(x=Train[-5],y=Train[5])
krls01 <-krls(x=TrainW[-5],y=TrainW[5])
krls01 <-krls(x=TrainW[-5],y=TrainW[5])
TrainW
w <- data.frame(mf,Temperature.K.,Mwanion,Mwcation,Density)
w <- na.omit(w)
w
?createDataPartition
inTrain <-createDataPartition(y=Density$Density,
     p=0.8,
     list=FALSE)
inTrain <-createDataPartition(y=Density$w,
     p=0.8,
     list=FALSE)
inTrain <-createDataPartition(y=w[5],
     p=0.8,
     list=FALSE)
inTrain <-createDataPartition(y=w[,5],
     p=0.8,
     list=FALSE)
inTrain
inTrain <-createDataPartition(y=w,
     p=0.8,
     list=FALSE)
inTrain
inTrain <-createDataPartition(y=w[,5],
     p=0.8,
     list=FALSE)
TrainW <-w[inTrain]
TrainW
str(inTrain)
library(mlbench)
 data(Sonar)
head(Sonar)
set.seed(107)
 inTrain <- createDataPartition(y = Sonar$Class,
                                 + ## the outcome data are needed
                                   +  p = .75,
                                 +  ## The percentage of data in the
                                   +   ## training set
                                   +  list = FALSE)
 inTrain <- createDataPartition(y = Sonar$Class,
                                  ## the outcome data are needed
                                     p = .75,
                                  ## The percentage of data in the
                                      ## training set
                                     list = FALSE)
inTrain
str(inTrain)
training <- Sonar[ inTrain,]
training
inTrain <-createDataPartition(y=w[,5],
     p=0.8,
     list=FALSE)
TrainW <-w[inTrain,]
TestW  <-w[-inTrain,]
krls01 <-krls(x=TrainW[-5],y=TrainW[5])
krls01 <-krls(x=TrainW[,-5],y=TrainW[,5])
?krls
krls01 <-krls(X=TrainW[,-5],y=TrainW[,5])
summary(krls01)
?predplot
predplot(krls01,newdata=TestW,which=c("train","test"))
predplot(krls01,newdata=TestW)
predplot(krls01)
plot(krls01)
plot(krls01)
tiff("krls1",width = 6, height = 7, units = 'in', res = 230)
plot(krls01)
dev.off()
plot(krls01)
predplot(krls01)
krls1 <-krls(X=TrainW[,-5],y=TrainW[,5])
predplot(krls1)
fitted(krls01)
plot(fitted(krls01)~TrainW[,5])
plot(fitted(krls01)~TrainW[,5],color="blue")
plot(fitted(krls01)~TrainW[,5],col="blue")
predict(krls01,newdata=TestW)
predict(krls01,newdata=TestW[,-5])
?predict
?predict::krls
?predict::KRLS
?KRLS::predict
?krls
# predictor data
     X <- matrix(seq(-3,3,.1))
     # true function
     Ytrue <- sin(X)
     # add noise 
     Y     <- sin(X) + rnorm(length(X),sd=.3)
     # approximate function using KRLS
     out <- krls(y=Y,X=X)
     # get fitted values and ses
     fit <- predict(out,newdata=X,se.fit=TRUE)
fit
par(mfrow=c(2,1))
     plot(y=Ytrue,x=X,type="l",col="red",ylim=c(-1.2,1.2),lwd=2,main="f(x)")
     points(y=fit$fit,X,col="blue",pch=19)
     arrows(y1=fit$fit+1.96*fit$se.fit,
            y0=fit$fit-1.96*fit$se.fit,
            x1=X,x0=X,col="blue",length=0)
     legend("bottomright",legend=c("true f(x)=sin(x)","KRLS fitted f(x)"),
            lty=c(1,NA),pch=c(NA,19),lwd=c(2,NA),col=c("red","blue"),cex=.8)
plot(y=cos(X),x=X,type="l",col="red",ylim=c(-1.2,1.2),lwd=2,main="df(x)/dx")
     points(y=out$derivatives,X,col="blue",pch=19)
 legend("bottomright",legend=c("true df(x)/dx=cos(x)","KRLS fitted df(x)/dx"),
            lty=c(1,NA),pch=c(NA,19),lwd=c(2,NA),col=c("red","blue"),,cex=.8)
Ytrue
krls01 <-krls(X=TrainW[,-5],y=TrainW[,5])
Ytrue
?predict
par(mfrow=c(1,2))
     f<-function(x1,x2){ sin(x1)*cos(x2)}
     x1 <- x2 <-seq(0,2*pi,.2)
     z   <-outer(x1,x2,f)
     persp(x1, x2, z,theta=30,main="true f(x1,x2)=sin(x1)cos(x2)")
X <- cbind(sample(x1,200,replace=TRUE),sample(x2,200,replace=TRUE))
     y   <- f(X[,1],X[,2])+ runif(nrow(X))
     # fit surface
     krlsout <- krls(X=X,y=y)
ff  <- function(x1i,x2i,krlsout){predict(object=krlsout,newdata=cbind(x1i,x2i))$fit}
     z   <- outer(x1,x2,ff,krlsout=krlsout)
     persp(x1, x2, z,theta=30,main="KRLS fitted f(x1,x2)")
x1
predict(krls01,newdata=TestW)
predict(krls01,newdata=TestW[,-5])
plot(predict(krls01,newdata=TestW[,-5]))
?predict.krls
predicted <-predict.krls(krls01,newdata=TestW[,-5])
predicted
predicted
?predict.krls
?predplot.krls
predicted$fit
predicted <-fit(predict.krls(krls01,newdata=TestW[,-5]))
predicted <-predict.krls(krls01,newdata=TestW[,-5])
plot(fitted(krls01)~TrainW[,5],col="blue",ylab="Densidade estimada",xlab="Densidade experimental")
par(mfrow=c(1,1)
)
plot(fitted(krls01)~TrainW[,5],col="blue",ylab="Densidade estimada",xlab="Densidade experimental")
points(predicted$fit)
test <-cbind(TestW,predicted$fit)
test
test <-cbind(TestW[5],predicted$fit)
test
points(test[1],test[2])
plot(test[1],test[2])
points(Density,predicted$fit,data=test)
?points
points(TestW,predicted$fit)
points(TestW[5],predicted$fit)
points(TestW[,5],predicted$fit)
points(TestW[,5],predicted$fit,col="red")
legend("bottomright",legend=c("Dados de Teste","Dados do modelo"),
            lty=c(1,NA),pch=c(NA,19),lwd=c(2,NA),col=c("red","blue"),,cex=.8)
legend("bottomright",legend=c("Dados de Teste","Dados do modelo"),
            lty=c(1,NA),pch=c(NA,1),lwd=c(2,NA),col=c("red","blue"),,cex=.8)
  legend("bottomright",legend=c("Dados de Teste","Dados do modelo"),
            lty=c(1,NA),pch=c(1,1),lwd=c(2,NA),col=c("red","blue"),,cex=.8)
 legend("bottomright",legend=c("Dados de Teste","Dados do modelo"),
            lty=c(1,1),pch=c(1,1),lwd=c(2,2),col=c("red","blue"),,cex=.8)
     legend("bottomright",legend=c("Dados de Teste","Dados do modelo"),
            pch=c(1,1),lwd=c(2,2),col=c("red","blue"),,cex=.8)
tiff("predkrls",width = 6, height = 7, units = 'in', res = 230)
plot(fitted(krls01)~TrainW[,5],col="blue",ylab="Densidade estimada",xlab="Densidade experimental".main="modelo KRLS")
points(TestW[,5],predicted$fit,col="red")
     legend("bottomright",legend=c("Dados de Teste","Dados do modelo"),
            pch=c(1,1),lwd=c(2,2),col=c("red","blue"),,cex=.8)
dev.off()
tiff("predkrls",width = 6, height = 7, units = 'in', res = 230)
plot(fitted(krls01)~TrainW[,5],col="blue",ylab="Densidade estimada",xlab="Densidade experimental".main="modelo KRLS")
plot(fitted(krls01)~TrainW[,5],col="blue",ylab="Densidade estimada",xlab="Densidade experimental",main="modelo KRLS")
points(TestW[,5],predicted$fit,col="red")
     legend("bottomright",legend=c("Dados de Teste","Dados do modelo"),
            pch=c(1,1),lwd=c(2,2),col=c("red","blue"),,cex=.8)
dev.off()
plot(krls01)
tiff("krls1",width = 6, height = 7, units = 'in', res = 230)
plot(krls01)
dev.0ff()
dev.off()
q()
