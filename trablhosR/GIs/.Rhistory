r <- raster(nrow=1000, ncol=1000, extent(t001), crs=NA)
r[] <- runif(ncell(r))
r[r<0.5] <- NA
xyz <- rasterToPoints(r)
r2 <- rasterFromXYZ(xyz) #Raster to point conversion. Cells with NA are not converted. A function can be used to select a subset of the raster cells (by their values).
plot(r2)
t101 <-stack(t0001,r2)
plot(t101)
r3 <-mask(r2,t0001)
plot(r3)
t101 <-stack(t0001,r3)
plot(t101)
r4 <-dropLayer(r2,1)
r4 <-dropLayer(r2,c(1))
nlayers(t101)
r4 <-dropLayer(t101,c(1))
plot(r4)
install.packages("geoR")
plot(xyz,layer)
plot(t2)
spplot(t2)
t8 <-readOGR("Ptos_drenaje.shp",layer="Ptos_drenaje")
plot(t8)
spplot(t8)
t8
head(t8)
coordinates(tt08) <-~x+y
coordinates(t8) <-~x+y
e <-coordinates(t8)
e
plot(e)
plot(t8)
xyz
head(xyz)
plot(t8)
T5 <-raster("29S525ZN.tif")
plot(T5)
plot(T4)
plot(T2)
plot(T1)
MA <- read.delim("~/r/GIs/MA", row.names=NULL)
View(MA)
r1 <- raster(nrow=1000, ncol=1000, extent(t001), crs=NA)
attach(MA)
as.matrix(MA[,2:4])
tr <-as.matrix(MA[,2:4])
tes <-rasterFromXYZ(tr)
tes
summary(MA)
plot(tes)
ssplot(MA)
spplot(MA)
spplot(tr)
spplot(tes)
plot(tes)
frfr <-raster(tes,extent(t001))
plot(tr)
##Análises de emissões
summary(tes)
plot(r2)
ra <- aggregate(tes,10)
plot(ra)
ra <- aggregate(tes,100)
plot(ra)
summary(ra)
ra
tes
library(fields)
xy <- data.frame(xyFromCell(ra, 1:ncell(ra))) # extrai valores de coodenadas de cćlulas e cria um data.frame
View(xy)
v <- getValues(ra) # valores das células
tps <- Tps(xy, v) # modelo de interpolação, input e output
rr <-raster(ra)
rr <-interpolate(rr,tps)
plot(rr)
rr <-raster(tes)
rr <-interpolate(rr,tps)
plot(rr)
rft <-mask(rr,t0001)
rr <-raster(t0001)
rr <-interpolate(rr,tps)
plot(rr)
rft <-mask(rr,t0001)
plot(rft)
spplot(rft)
spplot(rft,main="Bacia Taquari MA t/ano")
plot(rft)
points(MA[,2:3])
points(MA[,2:3],pch=2)
points(MA[,2:3],pch=2,labels(Municipio))
a <-Municipio
a
points(MA[,2:3],pch=2,labels(a))
points(MA[,2:3],pch=2)
r <- raster(system.file("external/test.grd", package="raster"))
ra <- aggregate(r, 10) # cria rasterlayer com menor número de células, maiores células
xy <- data.frame(xyFromCell(ra, 1:ncell(ra))) # extrai valores de coodenadas de cćlulas e cria um data.frame
v <- getValues(ra) # valores das células
#### Thin plate spline model
library(fields) # package com os modelos de inerpolação
tps <- Tps(xy, v) # modelo de interpolação, input e output
p <- raster(r) # MUITO IMPORTANTE, criou um raster sem valores mas com as informações epaciais do raster original
# use model to predict values at all locations
p <- interpolate(p, tps) # usa o modelo de interpolação para criar os valores interpolados e colocalos como a layer
p1 <- mask(p, r) # cria mask para plotar somoente os valores que estão no território original.
plot(p) # valores interpolados ocupando toda a extensão do raster
plot(p1)
spplot(rft,main="Bacia Taquari MA t/ano")
points(MA[,2:3],pch=2)
plot(rft)
points(MA[,2:3],pch=2)
plot(rft)
points(MA[,2:3],pch=2)
t1 <-readOGR("bacia_delim.shp",layer = "bacia_delim") # essa função funciona
plot(t1)
spplot(t1)
plot(t0001)
summary(t0001)
spplot(t0001)
class(t1)
names(t1)
r3 <-mask(r2,t0001)
plot(r3)
spplot(rft,main="Bacia Taquari MA t/ano")
plot(rr)
rft <-mask(rr,t0001)
plot(rft)
t2 <-readShapeSpatial("bacia_delim.shp",IDvar = "OBJECTID",proj4string=CRS("+proj=longlat +ellps=clrk66"))
read.dbf("bacia_delim.dbf") # precisei ler o .dbf para ver a coluna com os ids
plot(t2)
spplot(t2)
t4 <-readOGR("corte_dem.shp",layer = "corte_dem")
spplot(t4)
t5 <-readOGR("Bacias_otras.shp",layer="Bacias_otras")
t5
plot(t5)
t6 <-readOGR("drenaje.shp",layer = "drenaje")
plot(t6)
t06 <-rasterize(t6,t001)
plot(t06)
t06
t006 <-mask(t06,t001)
plot(t006)
plot(t06)
ti06 <-aggregate(t006,10)
plot(t006)
plot(T1)
T1 <-raster("Flujo_acum.tif")
plot(T1)
image(T1)
spplot(T1)
T2 <-raster("Pantalla.tif")
plot(T2)
image(T2)
spplot(T2)
T3 <-raster("dem_corte2.tif")
plot(T3)
T5 <-raster("29S525ZN.tif")
plot(T5)
plot(t9)
t8 <-readOGR("Ptos_drenaje.shp",layer="Ptos_drenaje")
plot(t8)
View(MA)
attach(MA)
tr1 <-data.frame(Longitude,Latitude)
tps <- Tps(tr1, MA.t.ano)
library("fields", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
tps <- Tps(tr1, MA.t.ano)
summary(T1)
Head(T1)
head(T1)
plot(T1)
t21 <-interpolate(rr,tps)
plot(t21)
t22 <-mask(t21,t0001)
plot(t22)
ssplot(t22)
spplot(t22)
plot(t22)
points(MA[,2:3],pch=2)
install.packages("deldir")
deldir(tr1)
library(deldir)
deldir(tr1)
plot(deldir(tr1))
t23 <-deldir(tr1)
plot(t23)
t23 <-deldir(tr1,plot=T)
# Puts dummy points at the corners of the rectangular
# window, i.e. at (0,0), (10,0), (10,10), and (0,10)
# An "alerting note" is printed.
x    <- c(2.3,3.0,7.0,1.0,3.0,8.0)
y    <- c(2.3,3.0,2.0,5.0,8.0,9.0)
tv   <- deldir(x,y,list(ndx=2,ndy=2),c(0,10,0,10))
# Plots the triangulation which was created (but not the tesselation).
## Not run:
tv   <- deldir(x,y,list(ndx=2,ndy=2),c(0,10,0,10),plot=TRUE,wl='tr')
surface(t23)
plot(t23)
plot(rft)
plot(rft)
spplot(tes)
plot(t21)
t22 <-mask(t21,t0001)
plot(t22)
dboConc <- read.delim("~/r/GIs/dboConc", row.names=NULL)
View(dboConc)
attach(dboConc)
ob1 <-data.fram(Longitude,Latitude)
ob1 <-data.frame(Longitude,Latitude)
fit1 <- Tps(ob1,Concentra....o.g.d)
dbo1 <-interpolate(t0001,fit1)
plot(dbo1)
dbo2 <-mask()dbo1,t00o1)
dbo2 <-mask(dbo1,t00o1)
dbo2 <-mask(dbo1,t0001)
plot(dbo2)
points(dboConc[1:2])
contour(dbo2)
levelplot(dbo2)
library("rasterVis", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
levelplot(dbo2)
deldir(dboConc)
deldir(dboConc,plot=T)
fit <- Krig(ChicagoO3$x, ChicagoO3$y, theta=20)
summary( fit) # summary of fit
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
dbo1 <-interpolate(t0001,fit1)
dbo2 <-mask(dbo1,t0001)
plot(dbo2)
set.panel(m=1, n=1, relax=FALSE)
plot(dbo2)
plot(Longitude,Latitude)
rasterFromXYZ(dboConc)
ts1 <-rasterFromXYZ(dboConc)
ts1 <-rasterFromXYZ(dboConc,res=c(1,1))
ts1 <-rasterFromXYZ(dboConc)
ts2 <-aggregate(dboConc,100)
ts2 <-aggregate(dboConc,10)
ts2 <-aggregate(ts1,10)
plot(ts2)
ts2 <-aggregate(ts1,100)
plot(ts2)
head(ts2)
xy <-xyFromCell(ts2,1:ncell(ts2))
t <-getValues(ts2)
fit2 <-Tps(xy,t)
rst1 <-interpolate(ts1,fit2)
rst2 <-mask(ts1,t0001)
ts3 <-raster(ts2,extent(t0001))
ex <-extente(t0001)
ex <-extent(t0001)
ts3 <-raster(ts2,ex)
ts3 <-raster(t0001)
rst1 <-interpolate(ts3,fit2)
rst2 <-mask(ts1,t0001)
rst2 <-mask(ts3,t0001)
rst2 <-mask(rst1,t0001)
plot(rst2)
points(dboConc[1:2])
spplot(rst2)
fit3 <-Krig(ob1,Concentra....o.g.d)
surface(fit3)
fit3 <-Krig(ob1,Concentra....o.g.d,cov.function = Exponential())
d <-dist(ob1)
fit3 <-Krig(ob1,Concentra....o.g.d,cov.function = Exponential(d))
set.panel()
surface(fit3)
fit2 <-Tps(xy,t,m-2)
fit2 <-Tps(xy,t,m=2)
rst1 <-interpolate(ts3,fit2)
rst2 <-mask(rst1,t0001)
plot(rst2)
fit2 <-Tps(xy,t,m=3)
rst1 <-interpolate(ts3,fit2)
rst2 <-mask(rst1,t0001)
plot(rst2)
fit2 <-Tps(xy,t,m=1)
fit2 <-Tps(xy,t,m=6)
rst1 <-interpolate(ts3,fit2)
rst2 <-mask(rst1,t0001)
plot(rst2)
fit2 <-Tps(xy,t,m=2)
rst1 <-interpolate(ts3,fit2)
rst2 <-mask(rst1,t0001)
plot(rst2)
spplot(rst2)
library("gstat")
mod <-idw(Concentr...o.g.d~Longitude+Latitude)
attach(dboConc)
z <-dboConc[,3]
mod <-idw(z~1,locations = ob1)
mod <-idw(formula=z~1,locations = ob1)
mod <-idw(formula=t,locations = xy)
library(sp)
data(meuse)
meuse
class(meuse)
coordinates(meuse) =~x+y
data(meuse.grid)
meuse.grid
summary(meuse.grid)
gridded(meuse.grid) = ~x+y
zinc
class(meuse)
coordinates(dboConc) = ~x+y
coordinates(ob1) = ~x+y
coordinates(ob1) = ~Longitude+Latitude
class(ob1)
ob1<-SpatialPointsDataFrame(ob1)
ob1 <-SpatialPointsDataFrame(ob1,data = ob1)
ob1 <-data.frame(Longitude,Latitude)
ob1 <-SpatialPointsDataFrame(ob1,data = ob1)
plot(ob1)
gridded<-(ob1)
mod <-idw(formula=z,locations =ob1 )
mod <-idw(formula=z~1,locations =ob1 )
tes.grd <-rasterToPoints(tes)
gridded(tes.grd)= T
gridded(tes.grd)= TRUE
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
tes.grd <-rasterToPoints(tes,spatial = TRUE)
gridded(tes.grd)= TRUE
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
plot(mod)
spplot(mod)
mod
mod <-idw(formula=z~Longitude+Latitude,locations =ob1,newdata=tes.grd)
tes.grd
tes.grd <-rasterToPoints(ts1,spatial = TRUE)
gridded(tes.grd)= TRUE
mod <-idw(formula=z~Longitude+Latitude,locations =ob1,newdata=tes.grd)
ts1
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
tes.grd <-rasterToPoints(ts3,spatial = TRUE)
gridded(tes.grd)= TRUE
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
plot(mod)
mod <-idw(formula=z~Longitude+Latitude,locations =ob1,newdata=tes.grd)
tes.grd <-rasterToPoints(ts3,spatial = TRUE)
tes.grd <-rasterToPoints(ts1,spatial = TRUE)
gridded(tes.grd)= TRUE
mod <-idw(formula=z~Longitude+Latitude,locations =ob1,newdata=tes.grd)
tes.grd
mod <-idw(formula=z~Longitude+Latitude,locations =ob1,newdata=tes.grd)
library("gstat", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
mod <-idw(formula=z~Longitude+Latitude,locations =ob1,newdata=tes.grd)
attach(MA)
ob1 <-data.frame(Longitude,Latitude)
mod <-idw(formula=z~Longitude+Latitude,locations =ob1,newdata=tes.grd)
z <-dboConc[,3]
mod <-idw(formula=z~Longitude+Latitud,locations =ob1,newdata=tes.grd)
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
plot(mod)
tes.grd <-rasterToPoints(ts1,spatial = TRUE)
gridded(tes.grd)= TRUE
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
tes.grd <-rasterToPoints(ts1,spatial = TRUE)
tes.grd <-rasterToPoints(ts1,spatial = TRUE)
tes.grd
gridded(tes.grd)= TRUE
tes.grd
z <-dboConc[,3]
library("gstat", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
ob1 <-SpatialPointsDataFrame(ob1,data = ob1)
plot(ob1)
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
coordinates(ob1) = ~Longitude+Latitude
tes.grd <-rasterToPoints(ts1,spatial = TRUE)
tes.grd
gridded(tes.grd)= TRUE
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
ob1 <-data.frame(Longitude,Latitude)
attach(dboConc)
ob1 <-data.frame(Longitude,Latitude)
coordinates(ob1) = ~Longitude+Latitude
class(ob1)
ob1 <-SpatialPointsDataFrame(ob1,data = ob1)
ob1 <-data.frame(Longitude,Latitude)
ob1 <-SpatialPointsDataFrame(ob1,data = ob1)
class(ob1)
coordinates(ob1) = ~Longitude+Latitude
mod <-idw(formula=z~1,locations =ob1,newdata=tes.grd)
plot(mod)
class(mod)
raster(mod)
ras3 <-raster(mod)
plot <-(ras3)
plot(ras3)
attach(MA)
ma1 <-as.matrix(MA[,2:4]) # matriz dos locais com a resposta
ma2 <-data.frame(Longitude,Latitude)# matriz só dos locais
ma3 <-rasterFromXYZ(ma1)
t1 <-readOGR("bacia_delim.shp",layer = "bacia_delim")
library(rgdal)
t1 <-readOGR("bacia_delim.shp",layer = "bacia_delim")
ma5 <-aggregate(ma3,30)
plot(ma5)
ma3
xyma5 <-xy <- data.frame(xyFromCell(ma5, 1:ncell(ma5)))
ma5res <-getValues(ma5)
ma5mat<-data.frame(xyma5,ma5res)
ma5mod <-gstat(id = "MA.t.ano", formula = MA.t.ano~1, locations = ma2, data=ma1,
nmax=13, set=list(idp = .5))
ma5res <-getValues(ma5)
mod <-idw(formula=ma5res~1,locations =xyma5,newdata=tes.grd)
xyma5 <-SpatialPointsDataFrame(xyma5,data = xyma5)
mod <-idw(formula=ma5res~1,locations =xyma5,newdata=tes.grd)
mod <-idw(formula=ma5res~1,locations =xyma5,newdata=tes.grd,na.rm=T)
library(raster)
library(sp)
library(rgdal)
library(gstat)
library(maptools)
library(fields)
library(raster)
library(sp)
library(rgdal)
library(gstat)
library(maptools)
library(fields)
MA <-read.delim("MA")
attach(MA)
ma1 <-data.frame(MA[,2:4]) # matriz dos locais com a resposta
ma2 <-data.frame(Longitude,Latitude)# matriz só dos locais
t1 <-readOGR("bacia_delim.shp",layer = "bacia_delim")
exob1 <-extent(t1)
ras1 <-raster(exob1,nrow=1000,ncol=1000)
ras1
ras1 <-raster(exob1,nrow=1000,ncol=1000,crs="+proj=longlat +datum=WGS84" )
ras1
ma11 <-data.frame(ma2,MA.T.ano)
attach(MA)
ma11 <-data.frame(ma2,MA.T.ano)
ma11 <-data.frame(ma2,MA.t.ano)
mg <- gstat(id = "MA.t.ano", formula = Ma.t.ano~1, locations = ~Longitude+Latitude, data=ma11,
nmax=13, set=list(idp = .5))
tras1 <-interpolate(ras1,mg)
ras1
gridded(ras1)
library(pls)
r <- raster(system.file("external/test.grd", package="raster")) # sistema de cordenadas de referências em graus
r
head(r)
ras1
head(ras1)
plot(ras1)
ma3 <-rasterFromXYZ(ma1)
ma3 <-rasterFromXYZ(ma1,exob1)
ma3 <-rasterFromXYZ(ma1)
wq <-interolate(ma3,mg)
wq <-interpolate(ma3,mg)
ma3
wq <-interpolate(ma3,mg,xyNames=c("longitude","Latitude"))
ras1
wq <-interpolate(ras1,mg,xyNames=c("longitude","Latitude"))
length(Latitude)
length(Longitude)
ma4 <-raster(ma3)
wq <-interpolate(ma4,mg,xyNames=c("longitude","Latitude"))
wq <-interpolate(ma4,mg,xyNames=c("longitude","Latitude"),xyOnly=T)
mg
ma11 <-data.frame(ma2,MA.t.ano)
ma11 <-data.frame(ma2,MA.t.ano)
mg <- gstat(id = "MA.t.ano", formula = Ma.t.ano~1, locations = ~Longitude+Latitude, data=ma11,
nmax=13, set=list(idp = .5))
mg
tras1 <-predict()
tr1
attach(dboConc)
ob1 <-data.frame(Longitude,Latitude)
fit1 <- Tps(ob1,Concentra....o.g.d)
library(raster)
library(sp)
library(rgdal)
library(gstat)
library(maptools)
library(fields)
library(pls)
attach(dboConc)
dboConc <- read.delim("~/r/GIs/dboConc")
View(dboConc)
attach(dboConc)
ob1 <-data.frame(Longitude,Latitude)
ob1 <-data.frame(Longitude,Latitude,Longitude*Latitude,Longitude^2,Latitude^2)
fit1 <- Tps(ob1,Concentra....o.g.d)
View(ob1)
fit3 <-Krig(ob1,Concentra....o.g.d,cov.function = Exponential(d))
d <-dist(ob1)
fit3 <-Krig(ob1,Concentra....o.g.d,cov.function = Exponential(d))
library(sp)
library(raster)
library(maptools)
library(shapefiles)
library(fields)
library(caret)
library(rgdal)
library(kernlab)
library(pls)
library(fields)
library(gplots)
]
ma <-read.delim("Ma")
sts <-read.delim("STS")
ta <-read.delim("TA")
dbo <-read.delim("DBO")
attach(ma)
summary(ma)
plotmeans(MA.t.ano~Municipio)
plotmeans(MA.t.ano~Municipio,ylab="MA t/ano")
