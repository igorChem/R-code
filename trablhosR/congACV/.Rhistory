install.packages()
library("mixexp")
library("lattice")
q
q()
Poster para congresso para a inglaterra
# Summary
# 1-Tables
# 2-PCA
# 3-Biplots and linearizations
# 3.1- Best results of the biplots
# 4- PCA para diferenças dos os IL
# 5- first PLS models
# 6- plots para trends ionicos
# 7- modelos para o poster
# 8- gráficos para o poster
# 0-packages
library("pls")
library("lattice")
# 1-Tables
ionic1 <-read.table("r/ionic", header=T, row.names=1)
yield.mod1 <-subset(ionic1,yield1=="yes")[,1:20]
yield.mod2 <-subset(ionic1,yield2=="yes")[,1:20]
selec.mod1 <-subset(ionic1,select1=="yes")[,1:20]
selec.mod2 <-subset(ionic1,select2=="yes")[,1:20]
ionic2 <-subset(ionic1,Co2.sol!=0)
ionic3 <-subset(ionic2,select2=="no")
View(ionic1)
xyplot(Yield+TON+TOF+select~a.radii,data=ionic1,groups=znbr,auto.key=T)
cor(ionic1[,1:16])
library("abind", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
detach("package:abind", unload=TRUE)
install.packages("raster")
library("raster", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
r <- raster(ncol=36,nrow=18)
r[] <- NA
r[500] <- 1
b <- buffer(r, width=5000000)
#plot(b)
plot(b)
rgdal
logo <- brick(system.file("external/rlogo.grd", package="raster"))
names(logo)
par(mfrow=c(2,2))
plotRGB(logo, main='logo')
plot(logo, 1, col=rgb(cbind(0:255,0,0), maxColorValue=255))
plot(logo, 2, col=rgb(cbind(0,0:255,0), maxColorValue=255))
plot(logo, 3, col=rgb(cbind(0,0,0:255), maxColorValue=255))
p <- matrix(c(48, 48, 48, 53, 50, 46, 54, 70, 84, 85, 74, 84, 95, 85,
66, 42, 26, 4, 19, 17, 7, 14, 26, 29, 39, 45, 51, 56, 46, 38, 31,
22, 34, 60, 70, 73, 63, 46, 43, 28), ncol=2)
a <- matrix(c(22, 33, 64, 85, 92, 94, 59, 27, 30, 64, 60, 33, 31, 9,
99, 67, 15, 5, 4, 30, 8, 37, 42, 27, 19, 69, 60, 73, 3, 5, 21,
37, 52, 70, 74, 9, 13, 4, 17, 47), ncol=2)
# extract values for points
xy <- rbind(cbind(1, p), cbind(0, a))
v <- data.frame(cbind(pa=xy[,1], extract(logo, xy[,2:3])))
#build a model, here an example with glm
model <- glm(formula=pa~., data=v)
#predict to a raster
r1 <- predict(logo, model, progress=
'
text
'
)
plot(r1)
points(p, bg=
'
blue
'
, pch=21)
points(a, bg=
'
red
'
, pch=21)
# use a modified function to get a RasterBrick with p and se
# from the glm model. The values returned by
'
predict
'
are in a list,
# and this list needs to be transformed to a matrix
predfun <- function(model, data) {
v <- predict(model, data, se.fit=TRUE)
cbind(p=as.vector(v$fit), se=as.vector(v$se.fit))
}
# predfun returns two variables, so use index=1:2
r2 <- predict(logo, model, fun=predfun, index=1:2)
## Not run:
# You can use multiple cores to speed up the predict function
# by calling it via the clusterR function (you may need to install the snow package)
beginCluster()
r1c <- clusterR(logo, predict, args=list(model))
r2c <- clusterR(logo, predict, args=list(model=model, fun=predfun, index=1:2))
model <- glm(formula=pa~., data=v)
model
summary(model)
if (require(rgdal)) {
filename <- system.file("external/lux.shp", package="raster")
filename
p <- shapefile(filename)
shapefile(p,
'
copy.shp
'
)
## End(Not run)
}
install.packages("rgdal")
if (require(rgdal)) {
filename <- system.file("external/lux.shp", package="raster")
filename
p <- shapefile(filename)
shapefile(p,
'
copy.shp
'
)
## End(Not run)
}
install.packages("rgdal")
p <- matrix(c(48, 48, 48, 53, 50, 46, 54, 70, 84, 85, 74, 84, 95, 85,
66, 42, 26, 4, 19, 17, 7, 14, 26, 29, 39, 45, 51, 56, 46, 38, 31,
22, 34, 60, 70, 73, 63, 46, 43, 28), ncol=2)
a <- matrix(c(22, 33, 64, 85, 92, 94, 59, 27, 30, 64, 60, 33, 31, 9,
99, 67, 15, 5, 4, 30, 8, 37, 42, 27, 19, 69, 60, 73, 3, 5, 21,
37, 52, 70, 74, 9, 13, 4, 17, 47), ncol=2)
# extract values for points
xy <- rbind(cbind(1, p), cbind(0, a))
v <- data.frame(cbind(pa=xy[,1], extract(logo, xy[,2:3])))
#build a model, here an example with glm
model <- glm(formula=pa~., data=v)
mo#predict to a raster
r1 <- predict(logo, model, progress=
'
text
'
)
plot(r1)
points(p, bg=
'
blue
'
, pch=21)
points(a, bg=
'
red
'
, pch=21)
are in a list,
# and this list needs to be transformed to a matrix
predfun <- function(model, data) {
v <- predict(model, data, se.fit=TRUE)
cbind(p=as.vector(v$fit), se=as.vector(v$se.fit))
}
r2 <- predict(logo, model, fun=predfun, index=1:2)
install.packages(c("ggplot2", "Hmisc", "Rcmdr"))
install.packages("rgeos")
install.packages("rgdal")
if (require(rgdal)) {
filename <- system.file("external/lux.shp", package="raster")
filename
p <- shapefile(filename)
shapefile(p,
'
copy.shp
'
)
## End(Not run)
}
View(v)
p
filename
install.packages("rasterVis")
plot(p)
plot(p)
plot(p)
plot(filename)
file <- system.file("external/test.grd", package="raster")
s <- stack(file, file, file)
r <- raster(file)
s <- addLayer(s, r/2, r*2)
s
s <- dropLayer(s, c(3, 5))
nlayers(s)
plot(s)
file
r
plot(r)
plot(s)
b <- brick(system.file("external/rlogo.grd", package="raster"))
animate(b, n=1)
b <- brick(system.file("external/rlogo.grd", package="raster"))
animate(b, n=1)
b <- brick(system.file("external/rlogo.grd", package="raster"))
animate(b, n=1)
r <- raster(ncol=3, nrow=3)
r[] <- sqrt(1:ncell(r))
r[3:5] <- NA
as.data.frame(r)
s <- stack(r, r*2)
as.data.frame(s)
as.data.frame(s, na.rm=TRUE)
plot(s)
r <- raster(ncol=3, nrow=3)
r[] <- 1:ncell(r)
as.raster(r)
r <- raster(ncol=3, nrow=3)
r[] <- 1:ncell(r)
plot(as.raster(r))
f <- system.file("external/test.grd", package="raster")
r <- raster(f)
barplot(r, digits=-2, las=2, ylab=
'
Frequency
'
)
op <- par(no.readonly = TRUE)
par(mai = c(1, 2, .5, .5))
barplot(r, breaks=10, col=c(
'
red
'
,
'
blue
'
), horiz=TRUE, digits=NULL, las=1)
par(op)
f <- system.file("external/test.grd", package="raster")
r <- raster(f)
barplot(r, digits=-2, las=2, ylab=
'
Frequency
'
)
op <- par(no.readonly = TRUE)
par(mai = c(1, 2, .5, .5))
barplot(r, breaks=10, col=c(
'
red
'
,
'
blue
'
), horiz=TRUE, digits=NULL, las=1)
par(op)
b <- brick(system.file("external/rlogo.grd", package="raster"))
b
nlayers(b)
names(b)
extract(b, 870)
plot(b)
library(rgdal)
ilc <- read.delim("~/r/ILCsimulation/ilc", row.names=1, comment.char="#")
View(ilc)
ilc <- read.delim("~/r/ILCsimulation/ilc", comment.char="#")
View(ilc)
setwd("~/r/congACV")
mat <-read.delim("soja",row.names=1) 
attach(mat)
mat1 <-subset(mat,!kg_CO2_Eq=="NA") 
mat1
mat
N
plot(N,Region)
boxplot(N~Region)
q()
